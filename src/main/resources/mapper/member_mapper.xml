<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd"
>
<!-- 이 XML 을 어떤 interface 를 통해서 연결 할 건가? -->
<mapper namespace="com.frans.member.dao.MemberDAO">

	<select id="login" resultType="String" parameterType="String">
		SELECT emp_pw,emp_name FROM employee WHERE emp_id = #{emp_id}
	</select>

	<insert id="join" parameterType="hashmap" useGeneratedKeys="true" keyColumn="emp_id" keyProperty="emp_id" >
		INSERT INTO employee(emp_id,emp_pw,emp_name,emp_gender,emp_birth,emp_address,emp_phone,
			emp_email,emp_hire_date,emp_admin_auth,pos_idx,duty_idx,team_idx) 
			VALUES(#{emp_id},#{emp_pw},#{emp_name},#{emp_gender},#{emp_birth},#{emp_address}#{address_detail},#{emp_phone},
			#{emp_email},#{emp_hire_date},#{emp_admin_auth},#{pos_idx},#{duty_idx},#{team_idx})
	</insert>
	<insert id="join2" parameterType="hashmap">
		insert into career (emp_id,emp_career_idx,emp_school_name,emp_career_start,emp_career_end,emp_department,emp_degree,emp_career_etc) 
			values (#{emp_id},
			<if test="emp_career_idx.equals('없음')">'학력없음',null,null,null,null,null,null)</if>
			<if test="emp_career_idx.equals('고등학교')">#{emp_career_idx},#{emp_school_name},#{emp_career_start},#{emp_career_end},#{emp_department},#{emp_degree},#{emp_career_etc})</if>
			<if test="emp_career_idx.equals('대학교')">#{emp_career_idx},#{emp_school_name},#{emp_career_start},#{emp_career_end},#{emp_department},#{emp_degree},#{emp_career_etc})</if>
			<if test="emp_career_idx.equals('대학원')">#{emp_career_idx},#{emp_school_name},#{emp_career_start},#{emp_career_end},#{emp_department},#{emp_degree},#{emp_career_etc})</if>
			
	</insert>
	
<!-- 	<insert id="join3" parameterType="hashmap">
		insert into career (emp_id,emp_career_idx,emp_school_name,emp_career_start,emp_career_end,emp_department,emp_degree,emp_career_etc) 
			values
			<foreach collection="list" item="item" separator=" , ">
			(#{item.emp_id},
			<if test="emp_career_idx1.equals('없음')">'이력없음',null,null,null,null,null,null)</if>
			<if test="emp_career_idx1.equals('경력')">#{item.emp_career_idx1},#{item.emp_school_name1},#{item.emp_career_start1},#{item.emp_career_end1},#{item.emp_department1},#{item.emp_degree1},#{item.emp_career_etc1})</if>
        	</foreach>
	</insert> -->
	
<!-- 	<insert id="join3" parameterType="hashmap"> -->
<!-- 		insert into career (emp_id,emp_career_idx,emp_school_name,emp_career_start,emp_career_end,emp_department,emp_degree,emp_career_etc)  -->
<!-- 			values (#{emp_id}, -->
<!-- 			<if test="emp_career_idx1.equals('없음')">'이력없음',null,null,null,null,null,null)</if> -->
<!-- 			<if test="emp_career_idx1.equals('경력')">#{emp_career_idx1},#{emp_school_name1},#{emp_career_start1},#{emp_career_end1},#{emp_department1},#{emp_degree1},#{emp_career_etc1})</if> -->
<!-- 	</insert> -->
	
<!-- 	<insert id="join4" parameterType="hashmap">
		insert into license (emp_id,license_name,license_date,license_place,license_result) 
			values (#{emp_id},
			<if test="license_result.equals('')">null,null,null,'없음')</if>
			<if test="!license_result.equals('')">#{license_name},#{license_date},#{license_place},#{license_result})</if>
	</insert> -->
	
	<insert id="join5" parameterType="hashmap">
		insert into `right` (team_idx,emp_id,auth_type) 
			values (#{team_idx},#{emp_id},#{auth_type})
	</insert>
	
	<insert id="joinHigh" parameterType="String">
		INSERT into career(emp_id,emp_career_idx,emp_school_name,emp_career_start,emp_career_end,emp_department) 
		values(#{emp_id},#{emp_career_idx},#{emp_school_name},#{emp_career_start},#{emp_career_end},#{emp_department})
	</insert>
	
<!-- 	<insert id="joinUniv" parameterType="hashmap">
		INSERT into career(emp_id,emp_career_idx,emp_school_name,emp_career_start,emp_career_end,emp_department,emp_degree) 
		values(#{emp_id},#{emp_career_idx},#{emp_school_name},#{emp_career_start},#{emp_career_end},#{emp_department},#{emp_degree})
	</insert>
	
	<insert id="joinGrad" parameterType="hashmap">
		insert into `right` (team_idx,emp_id,auth_type) 
			values (#{team_idx},#{emp_id},#{auth_type})
	</insert> -->
	
	<insert id="joinCareer" parameterType="hashmap">
		INSERT into career(emp_id,emp_career_idx,emp_school_name,emp_career_start,emp_career_end,emp_department,emp_degree) 
		values(#{emp_id},#{emp_career_idx},#{emp_school_name},#{emp_career_start},#{emp_career_end},#{emp_department},#{emp_degree})
	</insert>
	
	<insert id="join4" parameterType="String">
		INSERT into license(emp_id,license_name,license_date,license_place,license_result) 
		values(#{emp_id},#{license_name},#{license_date},#{license_place},#{license_result})
	</insert>
	
	<insert id="fileUpload1" parameterType="com.frans.member.dto.MemberDTO">
		insert into file (file_ori, file_new,file_from, file_sort_idx) values (#{file_ori},#{file_new},#{param3},1)
	</insert>

	<insert id="fileUpload2" parameterType="com.frans.member.dto.MemberDTO">
		insert into file (file_ori, file_new,file_from, file_sort_idx) values (#{file_ori},#{file_new},#{param3},0)
	</insert>
	
 	<select id="teamList" resultType="com.frans.member.dto.MemberDTO">
		select team_idx, team_name from team
	</select>
	<select id="posList" resultType="com.frans.member.dto.MemberDTO">
		select pos_idx, pos_name from position
	</select>
	<select id="dutyList" resultType="com.frans.member.dto.MemberDTO">
		select duty_idx, duty_name from duty 
	</select>
	<select id="stateList" resultType="com.frans.member.dto.MemberDTO">
		select emp_state_idx, emp_state_name from emp_state
	</select> 
	
	<select id="memberList" resultType="com.frans.member.dto.MemberDTO">
		SELECT e.emp_name, e.emp_id, t.team_name, d.duty_name, p.pos_name, es.emp_state_name 
        FROM employee e, emp_state es, team t, `position` p, duty d
        WHERE e.team_idx = t.team_idx AND e.duty_idx = d.duty_idx AND e.pos_idx = p.pos_idx AND e.emp_state_idx = es.emp_state_idx
	</select>
	
	<select id="memberDetail" resultType="com.frans.member.dto.MemberDTO" parameterType="String">
		SELECT e.emp_id, e.emp_name, e.emp_gender, e.emp_birth, e.emp_address, e.emp_email,e.emp_phone, e.emp_hire_date, e.emp_admin_auth, t.team_name, d.duty_name, p.pos_name, es.emp_state_name
        FROM employee e, emp_state es, team t, `position` p, duty d
        WHERE e.team_idx = t.team_idx AND e.duty_idx = d.duty_idx AND e.pos_idx = p.pos_idx AND e.emp_state_idx = es.emp_state_idx AND emp_id = #{emp_id}
	</select>
	
	<select id="memberDetailSchool" resultType="com.frans.member.dto.MemberDTO" parameterType="String">
		SELECT e.emp_id,c.emp_career_idx, c.emp_school_name,c.emp_career_start,c.emp_career_end, c.emp_department,c.emp_degree,c.emp_career_etc
        FROM career c, employee e
        WHERE c.emp_id = e.emp_id AND e.emp_id = #{emp_id} order by c.emp_career_end desc
	</select>
	
	<select id="memberDetailLicense" resultType="com.frans.member.dto.MemberDTO" parameterType="String">
		SELECT e.emp_id,l.license_name,l.license_date,l.license_place,l.license_result
        FROM employee e, license l
        WHERE l.emp_id = e.emp_id AND e.emp_id = #{emp_id} order by l.license_date desc
	</select>
	
	<select id="memberDetailRight" resultType="com.frans.member.dto.MemberDTO" parameterType="String">
		SELECT t.team_name
        FROM employee e, `right` r, team t
        WHERE r.emp_id = e.emp_id AND t.team_idx = r.team_idx AND e.emp_id = #{emp_id}
	</select>

	
<!-- 	<select id="memberDetail1" resultType="com.frans.member.dto.MemberDTO" parameterType="String"> -->
<!-- 		SELECT e.emp_id,c.emp_career_idx, c.emp_school_name,c.emp_career_start,c.emp_career_end, c.emp_department,c.emp_degree,c.emp_career_etc,l.license_name,l.license_date,l.license_place,l.license_result -->
<!--         FROM career c, license l, employee e -->
<!--         WHERE c.emp_id = e.emp_id AND e.emp_id = l.emp_id AND e.emp_id = #{emp_id}; -->
<!-- 	</select> -->
	
	<select id="fileList" parameterType="String" resultType="com.frans.member.dto.MemberDTO">
		select *from file where file_from = #{emp_id} and file_sort_idx = 1
	</select>
	
	<select id="fileList1" parameterType="String" resultType="com.frans.member.dto.MemberDTO">
		select *from file where file_from = #{emp_id} and file_sort_idx = 0
	</select>
	
	<select id="selList" resultType="com.frans.member.dto.MemberDTO" parameterType="String">
		SELECT e.emp_name, e.emp_id, t.team_name, d.duty_name, p.pos_name, es.emp_state_name 
			FROM employee e, emp_state es, team t, `position` p, duty d		
			where e.pos_idx = p.pos_idx and e.emp_state_idx = es.emp_state_idx and e.team_idx = t.team_idx and e.duty_idx = d.duty_idx
	</select>
<!-- 				<if test="con.equals('')">e.pos_idx = p.pos_idx and e.emp_state_idx = es.emp_state_idx and e.team_idx = t.team_idx and e.duty_idx = d.duty_idx</if> -->
<!-- 				<if test="con.equals('all')">e.pos_idx = p.pos_idx and e.emp_state_idx = es.emp_state_idx and e.team_idx = t.team_idx and e.duty_idx = d.duty_idx</if> -->
<!-- 				<if test="con.equals('team')">e.pos_idx = p.pos_idx and e.emp_state_idx = es.emp_state_idx and e.team_idx = t.team_idx and e.duty_idx = d.duty_idx and team_idx = #{team_idx}</if> -->
<!-- 				<if test="con.equals('duty')">e.pos_idx = p.pos_idx and e.emp_state_idx = es.emp_state_idx and e.team_idx = t.team_idx and e.duty_idx = d.duty_idx and d.duty_idx = #{duty_idx}</if> -->
<!-- 				<if test="con.equals('pos')">e.pos_idx = p.pos_idx and e.emp_state_idx = es.emp_state_idx and e.team_idx = t.team_idx and e.duty_idx = d.duty_idx and p.pos_idx = #{pos_idx}</if> -->
<!-- 				<if test="con.equals('state')">e.pos_idx = p.pos_idx and e.emp_state_idx = es.emp_state_idx and e.team_idx = t.team_idx and e.duty_idx = d.duty_idx and es.emp_state_idx = #{emp_state_idx}</if> -->



	<select id="subsubSel" resultType="com.frans.member.dto.MemberDTO" parameterType="String">
		<if test="controll.equals('team')">
			select * from team;		
		</if>
		<if test="controll.equals('pos')">
			select * from position;		
		</if>
		<if test="controll.equals('duty')">
			select * from duty;		
		</if>
		<if test="controll.equals('state')">
			select * from emp_state;		
		</if>
	</select>
	
	<select id="subSelList" resultType="com.frans.member.dto.MemberDTO" parameterType="String">
		<if test="subSelect.equals('team')">
			SELECT e.emp_name, e.emp_id, t.team_name, d.duty_name, p.pos_name, es.emp_state_name 
			FROM employee e, emp_state es, team t, `position` p, duty d		
			where e.pos_idx = p.pos_idx and e.emp_state_idx = es.emp_state_idx and e.team_idx = t.team_idx and e.duty_idx = d.duty_idx and t.team_idx = #{team_idx} 	
		</if>
		<if test="subSelect.equals('pos')">
			SELECT e.emp_name, e.emp_id, t.team_name, d.duty_name, p.pos_name, es.emp_state_name 
			FROM employee e, emp_state es, team t, `position` p, duty d		
			where e.pos_idx = p.pos_idx and e.emp_state_idx = es.emp_state_idx and e.team_idx = t.team_idx and e.duty_idx = d.duty_idx and p.pos_idx = #{pos_idx} 	
		</if>
		<if test="subSelect.equals('duty')">
			SELECT e.emp_name, e.emp_id, t.team_name, d.duty_name, p.pos_name, es.emp_state_name 
			FROM employee e, emp_state es, team t, `position` p, duty d		
			where e.pos_idx = p.pos_idx and e.emp_state_idx = es.emp_state_idx and e.team_idx = t.team_idx and e.duty_idx = d.duty_idx and d.duty_idx = #{duty_idx} 	
		</if>
		<if test="subSelect.equals('state')">
			SELECT e.emp_name, e.emp_id, t.team_name, d.duty_name, p.pos_name, es.emp_state_name 
			FROM employee e, emp_state es, team t, `position` p, duty d		
			where e.pos_idx = p.pos_idx and e.emp_state_idx = es.emp_state_idx and e.team_idx = t.team_idx and e.duty_idx = d.duty_idx and es.emp_state_idx = #{emp_state_idx}	
		</if>
	</select>
	
	<update id="memberUpdate" parameterType="com.frans.member.dto.MemberDTO">
		UPDATE employee SET
			emp_id = #{emp_id},
			emp_pw = #{emp_pw},
			emp_name = #{emp_name},
			emp_address = #{emp_address},
			emp_phone = #{emp_phone},
			emp_email = #{emp_email},
			emp_admin_auth = #{emp_admin_auth},
			pos_idx = #{pos_idx},
			duty_idx = #{duty_idx},
			team_idx = #{team_idx},
			emp_state_idx = #{emp_state_idx}
		WHERE emp_id = #{emp_id}
	</update>
	
	<update id="fileUpdate1" parameterType="com.frans.member.dto.MemberDTO">
		update file set file_new = #{file_new} where file_from = #{emp_id} and file_sort_idx = 1
	</update>
	
	<update id="fileUpdate2" parameterType="com.frans.member.dto.MemberDTO">
		update file set file_new = #{file_new} where file_from = #{emp_id} and file_sort_idx = 0
	</update>
	
	<update id="highUpdate" parameterType="com.frans.member.dto.MemberDTO">
		update career set 
		emp_career_idx = #{emp_career_idx},
		emp_school_name = #{emp_school_name},
		emp_department = #{emp_department},
		emp_career_start = #{emp_career_start},
		emp_career_end = #{emp_career_end},
		emp_career_etc = #{emp_career_etc}
	</update>
	
	<update id="careerUpdate" parameterType="com.frans.member.dto.MemberDTO">
		update career set 
		emp_career_idx = #{emp_career_idx},
		emp_school_name = #{emp_school_name},
		emp_department = #{emp_department},
		emp_career_start = #{emp_career_start},
		emp_career_end = #{emp_career_end},
		emp_career_etc = #{emp_career_etc},
		emp_degree = #{emp_degree}
	</update>
	
	<update id="licenUpdate" parameterType="com.frans.member.dto.MemberDTO">
		update career set 
		license_name = #{license_name},
		license_date = #{license_date},
		license_place = #{license_place},
		license_result = #{license_result}
	</update>
	
	<update id="myPageUpdate" parameterType="com.frans.member.dto.MemberDTO">
		UPDATE employee SET
			emp_id = #{emp_id},
			emp_pw = #{emp_pw},
			emp_name = #{emp_name},
			emp_address = #{emp_address},
			emp_phone = #{emp_phone},
			emp_email = #{emp_email},
			emp_admin_auth = #{emp_admin_auth},
			pos_idx = #{pos_idx},
			duty_idx = #{duty_idx},
			team_idx = #{team_idx},
			emp_state_idx = #{emp_state_idx}
		WHERE emp_id = #{emp_id}
	</update>

	
	
</mapper>



